// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace webapi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230504201147_no_weatherforecast")]
    partial class no_weatherforecast
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("webapi.Model.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PostId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaa311"),
                            Content = "comment 1",
                            CreatedAt = new DateTime(2023, 5, 4, 20, 11, 47, 278, DateTimeKind.Utc).AddTicks(8017),
                            PostId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaa211"),
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaa111")
                        },
                        new
                        {
                            CommentId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaa312"),
                            Content = "comment 2",
                            CreatedAt = new DateTime(2023, 5, 4, 20, 11, 47, 278, DateTimeKind.Utc).AddTicks(8047),
                            PostId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaa212"),
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaa112")
                        },
                        new
                        {
                            CommentId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaa313"),
                            Content = "comment 3",
                            CreatedAt = new DateTime(2023, 5, 4, 20, 11, 47, 278, DateTimeKind.Utc).AddTicks(8051),
                            PostId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaa211"),
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaa111")
                        });
                });

            modelBuilder.Entity("webapi.Model.Post", b =>
                {
                    b.Property<Guid>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            PostId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaa211"),
                            Content = "user 1",
                            CreatedAt = new DateTime(2023, 5, 4, 20, 11, 47, 278, DateTimeKind.Utc).AddTicks(7956),
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaa111")
                        },
                        new
                        {
                            PostId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaa212"),
                            Content = "user 2",
                            CreatedAt = new DateTime(2023, 5, 4, 20, 11, 47, 278, DateTimeKind.Utc).AddTicks(7964),
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaa112")
                        },
                        new
                        {
                            PostId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaa213"),
                            Content = "user 3",
                            CreatedAt = new DateTime(2023, 5, 4, 20, 11, 47, 278, DateTimeKind.Utc).AddTicks(7968),
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaa113")
                        });
                });

            modelBuilder.Entity("webapi.Model.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Full_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Profile_Picture")
                        .HasColumnType("text");

                    b.Property<int>("Salt")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaa111"),
                            DateOfBirth = new DateTime(2023, 5, 4, 20, 11, 47, 278, DateTimeKind.Utc).AddTicks(7672),
                            Email = "user1@mail.com",
                            Full_Name = "user 1",
                            Password = "123",
                            Salt = 0
                        },
                        new
                        {
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaa112"),
                            DateOfBirth = new DateTime(2023, 5, 4, 20, 11, 47, 278, DateTimeKind.Utc).AddTicks(7697),
                            Email = "user2@mail.com",
                            Full_Name = "user 2",
                            Password = "123",
                            Salt = 0
                        },
                        new
                        {
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaa113"),
                            DateOfBirth = new DateTime(2023, 5, 4, 20, 11, 47, 278, DateTimeKind.Utc).AddTicks(7700),
                            Email = "user3@mail.com",
                            Full_Name = "user 3",
                            Password = "123",
                            Salt = 0
                        });
                });

            modelBuilder.Entity("webapi.Model.Comment", b =>
                {
                    b.HasOne("webapi.Model.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapi.Model.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("webapi.Model.Post", b =>
                {
                    b.HasOne("webapi.Model.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("webapi.Model.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("webapi.Model.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
